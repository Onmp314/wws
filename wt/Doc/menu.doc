
 The `menu' widget class
 -----------------------

 1 Usage
 -------

	#include <Wlib.h>
	#include <Wt.h>

	widget_t *menu  = wt_create (wt_menu_class, <parent>);


 2 Description
 -------------

Menu items are implemented with pushbutton (normal and submenu items)
and checkbutton (checkable items) widgets, but user may add other,
`decorative' widgets to them too.  Those will not be processed by the
menu widget.

When menu item is selected, menu widget will call an application
function specified for the item in the menu structure and open a popup
for a submenu if item has such.  Menu items may contain icons in
addition to text and submenus may be nested.  See also popup widget
documentation.


 3 Configuration Options
 -----------------------

Here are the options that can be set or queried with setopt() and
getopt() functions.


WT_USRVAL (long *)

	Store a user defined value (which is a long, but you pass a
	pointer to it) in the widget. This is useful if you have to
	associate some extra data with a widget.


WT_XPOS (long *)

	Set / get the X position of the widget, which is relative to the
	upper left corner of the parent window.


WT_YPOS (long *)

	Set / get the Y position of the widget, which is relative to the
	upper left corner of the parent window.


WT_WIDTH (long *)

	Set / get the width of the widget.


WT_HEIGHT (long *)

	Set / get the height of the widget.


WT_FONT (char *)

	Set the font used. This will be propagated to _all_ menu
	widget children.


WT_LIST_ADDRESS (wt_menu_item *menu)

	Set / get the menu item structure array to be used in the menu.
	Menu buttons will be created when this is set.  The structure
	and meaning of it's members is described in `menuitem.doc'.


WT_DRAW_FN (void (*) (widget_t *, short x, short y, BITMAP *)

	If this isn't set, menu icons _won't_ be drawn!  Global
	wt_drawbm_fn() function is available for handling bitmaps, for
	other illustrations you'll have to create your own function.
	This should be set before WT_LIST_ADDRESS if menu buttons should
	use this option in addition to popups.


WT_ORIENTATION (long *)

	Menu widget.  Set / get whether menu will be horizontal or
	vertical with:
		OrientVert
		OrientHorz	(default)

	With OrientVert you could use AlignFill WT_ALIGNMENT.  However,
	the menu items will thereafter be AlignFilled fixedly.


WT_ALIGNMENT (long *)

	Menu widget.  Set / get on which side of the menu button the
	popup will be opened to:
		AlignLeft
		AlignRight
		AlignTop
		AlignBottom	(default)
